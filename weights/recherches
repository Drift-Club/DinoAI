***************************************************
Fin de l'entraînement de cette IA.
Liste des scores :
20 21 20 20 21 21 20 19 20 20 19 20 20 21 19 35 21 22 21 20 20 22 20 20 58 21 20 20 20 20 20 20 20 20 20 19 38 19 20 20 20 20 41 34 19 20 45 57 21 22 20 21 21 20 21 21 20 21 21 21 44 21 20 20 21 20 21 21 64 29 21 19 21 29 19 19 20 19 20 33 20 19 20 20 20 43 22 21 20 20 20 19 20 22 19 20 20 20 20 21 20 20 21 19 52 19 20 20 19 30 20 20 20 20 19 21 22 20 20 38 20 21 19 21 19 29 20 21 19 20 20 22 20 20 20 19 20 21 20 19 33 21 20 20 19 19 19 19 19 19
Record : 64
Entraînée sur 150 épisodes
Moyenne aléatoire : 25.670589304818385
Moyenne supervisée : 19.02988067189764
***************************************************
>    params['epsilon_decay_linear'] = 1 / 75  # La fonction agent.epsilon détermine le caractère aléatoire des actions
    params['learning_rate'] = 0.001
    params['first_layer_size'] = 150  # neurons dans la première couche
    params['second_layer_size'] = 150  # dans la deuxième
    params['third_layer_size'] = 150  # dans la troisième
    params['episodes'] = 150  # Nombre de parties à jouer pour entraîner l'IA
    params['memory_size'] = 2500  # Taille de la mémoire
    params['batch_size'] = 1024  # 500 de base (ceci est un test)
    params['weights_path'] = 'weights/weights.hdf5'  # endroit de stockages des poids (weights)
    params[
        'load_weights'] = False  # Charger les poids pré-calculés (regarder l'IA jouer avec ses connaissances ultérieures)
    params['train'] = True  # Entraîner l'IA, ne pas utiliser les poids
    return params


***************************************************
Fin de l'entraînement de cette IA.
Liste des scores :
20 21 20 20 19 20 21 22 20 20 20 21 20 21 20 20 20 21 20 19 20 20 20 21 19 20 20 20 20 20 21 45 22 19 22 21 20 21 33 22 20 20 21 20 44 20 20 21 20 21 19 45 22 22 38 33 20 20 20 20 79 21 19 20 21 21 20 20 22 21 45 21 20 45 22 22 20 21 21 22 31 21 19 22 20 20 30 22 20 19 19 20 19 20 19 19 20 31 19 20 19 19 21 38 20 20 19 19 20 20 20 20 20 20 21 20 20 20 20 20 30 34 34 20 34 20 21 20 20 30 20 19 33 20 19 20 34 39 19 20 19 20 20 20 20 20 20 20 19 21
Record : 79
Entraînée sur 150 épisodes
Moyenne aléatoire : 34.25645506431391
Moyenne supervisée : 20.251990674078073
***************************************************
def définir_paramètres():
    params = dict()
    params['epsilon_decay_linear'] = 1 / 75  # La fonction agent.epsilon détermine le caractère aléatoire des actions
    params['learning_rate'] = 0.001
    params['first_layer_size'] = 150  # neurons dans la première couche
    params['second_layer_size'] = 150  # dans la deuxième
    params['third_layer_size'] = 150  # dans la troisième
    params['episodes'] = 150  # Nombre de parties à jouer pour entraîner l'IA
    params['memory_size'] = 2500  # Taille de la mémoire
    params['batch_size'] = 500  # 500 de base (ceci est un test)
    params['weights_path'] = 'weights/weights.hdf5'  # endroit de stockages des poids (weights)
    params[
        'load_weights'] = False  # Charger les poids pré-calculés (regarder l'IA jouer avec ses connaissances ultérieures)
    params['train'] = True  # Entraîner l'IA, ne pas utiliser les poids
    return params

***************************************************
Fin de l'entraînement de cette IA.
Liste des scores :
20 21 20 20 20 20 20 21 19 19 20 20 21 20 22 21 21 40 20 20 21 20 20 21 20 21 21 21 20 38 19 22 21 21 20 20 20 20 19 19 20 20 20 68 42 20 21 36 20 20 21 22 21 20 20 34 22 21 20 21 20 20 20 20 20 20 20 34 20 20 22 22 20 19 20 20 19 20 19 21 20 28 19 20 19 20 19 21 21 38 20 20 20 20 19 46 21 37 19 19 19 20 73 20 20 49 54 20 20 20 20 20 20 20 33 20 34 34 20 20 19 19 20 19 33 20 20 20 20 19 21 21 29 20 19 19 19 19 19 20 19 20 19 20 19 19 19 20 21 20
Record : 73
Entraînée sur 150 épisodes
Moyenne aléatoire : 21.398008868526865
Moyenne supervisée : 20.135306067607633
***************************************************
> def définir_paramètres():
    params = dict()
    params['epsilon_decay_linear'] = 1 / 60  # La fonction agent.epsilon détermine le caractère aléatoire des actions
    params['learning_rate'] = 0.001
    params['first_layer_size'] = 150  # neurons dans la première couche
    params['second_layer_size'] = 150  # dans la deuxième
    params['third_layer_size'] = 150  # dans la troisième
    params['episodes'] = 150  # Nombre de parties à jouer pour entraîner l'IA
    params['memory_size'] = 2500  # Taille de la mémoire
    params['batch_size'] = 500  # 500 de base (ceci est un test)
    params['weights_path'] = 'weights/weights.hdf5'  # endroit de stockages des poids (weights)
    params[
        'load_weights'] = False  # Charger les poids pré-calculés (regarder l'IA jouer avec ses connaissances ultérieures)
    params['train'] = True  # Entraîner l'IA, ne pas utiliser les poids
    return params

